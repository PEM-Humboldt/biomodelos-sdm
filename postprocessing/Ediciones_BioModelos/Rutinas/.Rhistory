Sys.Date()
gsub("-", "", Sys.Date())
date <- gsub("-", "", Sys.Date())
#' @param path.to.save Path where the resulting CSV file will be saved.
#'
#' @import data.table
#' @import openxlsx
#'
#' @return A CSV file with organized information for Geoserver.
#'
#' @examples
#' construct_df_geoserver("metadata.xlsx", "raster_folder/", "output/")
#'
construct_df_geoserver <- function(path.metadata, path.folder.raster, path.to.save){
import(data.table)
import(openxlsx)
# Determine the format of the metadata file
finalstr <- tail(unlist(strsplit(path.metadata, "\\.")), n = 1)
# Read metadata
if (finalstr == "xlsx"|finalstr == "xls") {
metadata <- openxlsx::read.xlsx(path.metadata, sheet = 1)
} else if (finalstr == "csv") {
metadata <- data.table::fread(path.metadata) |>
as.data.frame()
}
# Get the list of raster files
rasters <- list.files(path.folder.raster, pattern = ".tif$", full.names = F, recursive = F) |>
sort()
# Sort metadata
index_order <- metadata$acceptedNameUsage |> order()
tax_id <- metadata$taxID[index_order]
model_id <- metadata$modelID[index_order]
# Create a Geoserver-ready data frame
df_geoserver <- data.frame("tax_id" = tax_id, "model_id" = model_id, "model_file" = rasters)
# Generate a date to include in the resulting file name
date <- gsub("-", "", Sys.Date())
# Write the data frame to a CSV file
write.csv(df_geoserver, paste0(path.to.save, "df_geoserver_", date, ".csv"), row.names = F)
}
#' @param path.folder.save Path where the resulting CSV file will be saved.
#'
#' @import data.table
#' @import openxlsx
#'
#' @return A CSV file with organized information for Geoserver.
#'
#' @examples
#' construct_df_geoserver("metadata.xlsx", "raster_folder/", "output/")
#'
construct_df_geoserver <- function(path.file.metadata, path.folder.raster, path.folder.save){
import(data.table)
import(openxlsx)
# Determine the format of the metadata file
finalstr <- tail(unlist(strsplit(path.metadata, "\\.")), n = 1)
# Read metadata
if (finalstr == "xlsx"|finalstr == "xls") {
metadata <- openxlsx::read.xlsx(path.metadata, sheet = 1)
} else if (finalstr == "csv") {
metadata <- data.table::fread(path.metadata) |>
as.data.frame()
}
# Get the list of raster files
rasters <- list.files(path.folder.raster, pattern = ".tif$", full.names = F, recursive = F) |>
sort()
# Sort metadata
index_order <- metadata$acceptedNameUsage |> order()
tax_id <- metadata$taxID[index_order]
model_id <- metadata$modelID[index_order]
# Create a Geoserver-ready data frame
df_geoserver <- data.frame("tax_id" = tax_id, "model_id" = model_id, "model_file" = rasters)
# Generate a date to include in the resulting file name
date <- gsub("-", "", Sys.Date())
# Write the data frame to a CSV file
write.csv(df_geoserver, paste0(path.to.save, "df_geoserver_", date, ".csv"), row.names = F)
}
construct_df_geoserver <- function(path.file.metadata, path.folder.raster, path.folder.save){
import(data.table)
import(openxlsx)
# Determine the format of the metadata file
finalstr <- tail(unlist(strsplit(path.metadata, "\\.")), n = 1)
# Read metadata
if (finalstr == "xlsx"|finalstr == "xls") {
metadata <- openxlsx::read.xlsx(path.metadata, sheet = 1)
} else if (finalstr == "csv") {
metadata <- data.table::fread(path.metadata) |>
as.data.frame()
}
# Get the list of raster files
rasters <- list.files(path.folder.raster, pattern = ".tif$", full.names = F, recursive = F) |>
sort()
# Sort metadata
index_order <- metadata$acceptedNameUsage |> order()
tax_id <- metadata$taxID[index_order]
model_id <- metadata$modelID[index_order]
# Create a Geoserver-ready data frame
df_geoserver <- data.frame("tax_id" = tax_id, "model_id" = model_id, "model_file" = rasters)
# Generate a date to include in the resulting file name
date <- gsub("-", "", Sys.Date())
# Write the data frame to a CSV file
write.csv(df_geoserver, paste0(path.to.save, "df_geoserver_", date, ".csv"), row.names = F)
}
